\documentclass[a4paper]{article}

%\VignetteIndexEntry{User's manual}
%\VignetteKeyword{GOexpress}

\title{GOexpress: Visualise microarray and RNAseq data using gene ontology annotations}
\author{Kevin Rue-Albrecht}

\begin{document}
\SweaveOpts{}

\maketitle

\tableofcontents

\section[Introduction]{Introduction}

\subsection[The origin and purpose of \texttt{GOexpress}]{The origin and purpose of \texttt{GOexpress}}

The idea leading to the \texttt{GOexpress} R package emerged from a set of plotting functions I regularly used across various complex multifactorial transcriptomics studies from both microarray and RNA-seq platforms. Those functions were repeatedly used to visualise the expression profile of genes across groups of samples, to annotate technical gene identifiers from both microarray and RNA-seq platforms (i.e. probesets, ensembl gene identifiers) with their associated gene name, and to evaluate the clustering of samples based on genes participating in a common cellular function or location (i.e. gene ontology). While developing the \texttt{GOexpress} package and discussing its features with potential users, a few more features were added, to enhance and complement the initial functions, leading to the present version of the package.

Complex multifactorial experiments have become the norm in many research fields, thanks to the decrease in cost of high-throughput transcriptomics platforms and the barcoding/multiplexing of samples on the RNA-seq platform. While much effort has been (rightfully!) spent on the development of adequate statistical frameworks for the processing of raw expression data, much of the genewise visualisation is left to the end-user. However, data summarisation and visualisation can be a daunting task in multifactorial experiments, or require large amounts of copy-pasting to investigate the expression profile of a handful or genes and cellular pathways. Tested on multiple RNA-seq and microarray datasets, \texttt{GOexpress} offers an extendable set of data-driven plotting functions readily applicable to the output of widely used analytic packages estimating (differential) gene expression. Once past the initial analysis and filtering of \texttt{GOexpress} results, each gene and gene ontology is accessible by a single line of code to produce high-quality graphics. In short, the \texttt{GOexpress} package is a software package developed based on experimental datasets to ease the visualisation and interpretation of multifactorial transcriptomics data by bioinformaticians and biologists, while striving to keep it a simple, fast, and intuitive tool-kit.

\subsection[Intended input data]{Intended input data}

Despite their different underlying technologies, microarray and RNA-seq analytic pipelines typically yield a matrix measuring the expression level of each gene in each sample. \texttt{GOexpress} requires this matrix to be accompanied by an \texttt{AnnotatedDataFrame} object of the \texttt{Biobase} package providing phenotypic information for each of those samples (e.g. unique identifier, treatment, time-point). This phenotypic data-frame must contain at least one column containing an experimental factor made of two or more levels (in the genuine R meaning of "factor" and "levels"). The above expression matrix, phenotypic data-frame, and the name of the column containing such a factor are the minimal three input variables required for the \texttt{GOexpress} package to work. Additional arguments may be required, in particular for microarray datasets, but those are discussed in a later section.

Notably, the use of the \texttt{biomaRt} package enables \texttt{GOexpress} to support and annotate gene expression matrix from any species and any microarray chip supported by the BioMart database:

\texttt{http://www.ensembl.org/biomart/martview}.

\subsection[Purpose of this document]{Purpose of this document}

This User's Manual was intended as a helpful description of the main features implemented in the \texttt{GOexpress} package, along with a tutorial taking the user through a typical analysis pipeline \texttt{GOexpress} was designed for. While an example usage will be provided for each function of the package, the many arguments of each function cannot realistically be demonstrated in this manual, and we kindly ask users to also read the individual R vignettes accompanying the corresponding package functions for further details.

\section[Getting started]{Getting started}

\subsection[Installation]{Installation}

The package is currently under review by the Bioconductor staff. Hopefully, once accepted installing \texttt{GOexpress} should be as easy as running the two lines below:

<<>>=
source("http://bioconductor.org/biocLite.R")
biocLite("GOexpress")
@

However, if everything else fails, the \texttt{GOexpress} package has been maintained on a GitHub repository since the dawn of the project. Users may have to manually install missing dependencies, listed in the \texttt{DESCRIPTION} file of the \texttt{GOexpress} package. The source code, precompiled binaries for Windows and Unix, a Wiki, and a bug tracking system can be found at:

\texttt{https://github.com/kevinrue/GOexpress}.

\subsection[Getting help]{Getting help}

The \texttt{GOexpress} package is still in its early days and may require some fine-tuning or yet undetected bug fixes. Please contact the maintainer with a copy of the error message and the command run.

Despite our efforts to repeatedly test the \texttt{GOexpress} package on in-house datasets of both microarray and RNA-seq platforms, and from human and bovine origin, many of the species and microarrays supported by the BioMart database have not been tested yet. Do contact the package maintainer if you feel that the error is on our part(contact address in the package \texttt{DESCRIPTION} file).

Thoughtful suggestions for additional package functions, or improvement of existing ones is most welcome and may be implemented when time allows. Alternatively, we also encourage users to fork the GitHub repository of the project, develop and test their own feature, and finally generate a pull request to integrate it to the original repository (\texttt{https://github.com/kevinrue/GOexpress}).

As for all Bioconductor packages, the Bioconductor developers mailing list is probably the best place to ask for advice with a large and active community of Bioconducotr users \texttt{bioc-devel@r-project.org}.

\subsection[Citing \texttt{GOexpress}]{Citing \texttt{GOexpress}}

The work underlying \texttt{GOexpress} has not been formally published yet. A manuscript is in preparation and will be submitted to a bioinformatics journal in due time. In the meantime, users of the package are encouraged to cite the \texttt{GOexpress} package using the \texttt{citation} method of the \texttt{utils} package, as follows:

<<echo=TRUE>>=
citation(package="GOexpress")
@

\section[Quick start]{Quick start}

\subsection[Prerequisites]{Prerequisites}

As mentioned earlier, the \texttt{GOexpress} package requires two input variables, namely an expression matrix and the an \texttt{AnnotatedDataFrame} of the \texttt{Biobase} package. In the example below, we will use the sample dataset \texttt{log2cpm} provided with the package and made of a subset of 100 bovine ensembl gene identifiers (rows) measured in 117 samples (columns). This sample data is accompanied by an \texttt{AnnotatedDataFrame} \texttt{targets} detailing a number of phenotypic information fields describing each sample.

Let us load those two variables in the workspace, and load the \texttt{GOexpress} packge as well:

<<>>=
data(log2cpm)
data(targets)

library(GOexpress)
@

Importantly, note that the matrix \texttt{log2cpm} must have row names made of unique gene identifiers (i.e. microarray probeset or RNA-seq ensembl gene identifier), and column names made of unique sample identifiers. Most importantly, the order of the samples in the columns of \texttt{log2cpm} must match that of the samples in the rows of \texttt{pData(targets)}.

<<>>=
head(rownames(log2cpm))
head(colnames(log2cpm))
head(pData(targets))
all(colnames(log2cpm) == rownames(pData(targets))) # should return TRUE
@

Note that the \texttt{Time} column of \texttt{pData(targets)} is an R factor while the \texttt{Timepoint} column is a numeric vector. The first one is useful for grouping the samples, while the second is better suited to plot gene expression profiles while respecting the relative distance between the time-points.

\subsection[Main analysis]{Main analysis}

In this example, we look for GO terms enriched in genes best clustering the samples according their "Treatment" level. But first, let us make sure that the \texttt{Treatment} column of \texttt{pData(targets)} is indeed an R factor:

<<>>=
pData(targets)$Treatment
@

In this case, it is already a properly formatted factor. If that was not the case, the following line of code would convert the column to an R factor and allow to continue the analysis:

<<>>=
pData(targets)$Treatment = factor(pData(targets)$Treatment)
@

Now, we use the random forest statistical framework to score each gene on its ability to cluster samples from different treatments separately. Then the method will score each GO term by aggregating the average rank of its associated genes:

<<>>=
raw_results = GOexpress::GO_analyse(expr_data=log2cpm,
                                    phenodata=targets,
                                    f="Treatment")
@

Note that the above command does not specify which species the data originated from. As mentioned in the output messages, the first gene identifier in the expression matrix was used to guess the corresponding species and type of data. This is a fairly straightforward process for ensembl gene identifiers (e.g. "ENSBTA" correspondonds to \textit{Bos taurus}).

However, it can be more difficult to guess the microarray used to obtain a certain dataset, as many Affymetrix chips contain probesets named with the pattern "AFFX.*". In cases where the microarray platform cannot be detected automatically, we recommend users to use the \texttt{microarray} argument of the \texttt{GO\_analyse} method. The list of valid values for the microarray argument is available in the \texttt{microarray2dataset} data frame which can be loaded in the workspace using:

<<>>=
data(microarray2dataset)
@

This step is the longest step in the pipeline, but merely takes a couple of minutes to analyse approximately 12,000 genes in 117 samples with default parameters of 1,000 trees build using approximately 220 random predictor genes per iteration on a standard Ubuntu 12.04 server.

The output variable of the analysis summarises the parameters of the analysis and can easily be browsed with standard R methods:

<<>>=
names(raw_results)
str(raw_results)
head(raw_results$GO, n=5)
head(raw_results$genes, n=5)
head(raw_results$mapping)
@

\subsection[Filtering of results]{Filtering of results}

In the above raw results of the analysis, all three type (i.e. namespaces) of GO terms are merged in a single ranked table. It is however possible to extract the GO terms corresponding to a single namespace. 

<<>>=
BP = subset_scores(result=raw_result,
                   namespace="biological_process")
BP = subset_scores(result=raw_result,
                   namespace="BP")
MF = subset_scores(result=raw_result,
                   namespace="molecular_function")
CC = subset_scores(result=raw_result,
                   namespace="cellular_component")
@

Importantly, an early-identified bias of the scoring function is that GO terms associated with fewer genes are favored at the top of the ranking table. This is due to the fact that it is much easier for a group of 5 genes (e.g. "\texttt{B cell apoptotic process}") to have an high average rank than it is for a group of 6,000 genes (e.g. "\texttt{protein binding}"). Indeed the highest average rank of 5 genes is 2.5 while it is 3,000 for a group of 6,000 genes. 

However, in our experience, this bias has some advantages. First, it implicitely favors specific and well-defined GO terms(e.g. "\texttt{negative regulation of T cell apoptotic process}") as opposed to vague and uninformative GO terms (e.g. "\texttt{cytoplasm}"). Secondly, we observed many top-ranking GO terms associated with a single gene in the BioMart database. Those GO terms are consequently susceptible to single-gene events and artefacts in the expression data, as opposed to GO terms with a decent number of associated genes. Using the above filtering function, it is straightforward to filter out those GO terms with only a handful of associated genes:

<<>>=
BP.5 = subset_scores(result=raw_result,
                      namespace="biological_process",
                      total=5)
MF.10 = subset_scores(result=raw_result,
                   namespace="molecular_function",
                   total=10)
CC.15 = subset_scores(result=raw_result,
                   namespace="cellular_component",
                   total=15)
@

Furthermore, the inherent hierarchical structure and granularity of gene ontology terms can easily be browsed by using increasingly large value of the \texttt{total} filter. Note that this filter retains only GO terms associated with a certain count of genes in the BioMart database. It is also possible to use the \texttt{data} argument to filter for GO terms associated with a certain count of genes in the given expression dataset, although this approach is obviously more data-dependent and less robust.

\subsection[Details of the top-ranking GO terms]{Details of the top-ranking GO terms}

Once the GO terms are scored and ranked (and filtered), the top-ranking GO terms in the filtered object are those most enriched in genes with expression levels clustering best the predefined groups of samples based on the levels of the factor considered (\texttt{raw\_result\$factor}).

In this example, we list the top-20 filtered "Biological Process" GO terms extracted above and their statistics (automatically ranked by decreasing average rank of their associated genes):

<<>>=
head(BP.5$GO)
@

\subsection[Hierarchical clustering of samples based on gene expression associated with a GO term]{Hierarchical clustering of samples based on gene expression associated with a GO term}

In the previous section, we identified the GO terms most enriched for genes clustering samples according to their treatment. We will now generate for the top-ranked GO term ("\texttt{toll-like receptor 4 signaling pathway}") a heatmap to visualise simulatenously the clustering of samples and the expression level of each gene in each sample:

\begin{center}
<<fig=TRUE>>=
heatmap_GO(go_id="GO:0034142", result=BP.5,
           expr_data=log2cpm, phenodata=targets)
@
\end{center}

Importantly, users should be aware that the "best" GO term may not cluster samples at all; all GO terms are scored in the process, and even if none of them return a decent clustering, there will still be a "best" score.

Alternatively, it is possible to focus only on the hirearchical clustering of samples. The following code will build a dendrogram clustering samples using the expression data of the subset of genes associated with the "\texttt{toll-like receptor 4 signaling pathway}" gene ontology:

\begin{center}
<<fig=TRUE>>=
cluster_GO(go_id="GO:0034142", result=BP.5,
           expr_data=log2cpm, phenodata=targets)
@
\end{center}

Among the various arguments of the \texttt{cluster\_GO} function, the argument \texttt{f} can be used to specify an alternative column present in \texttt{pData(targets)} to label the samples in the dendrogram according to that phenotypic information. Obviously, the same set of genes being used, the clustering of samples will remain the same no matter the column chosen; however, the alternative labelling of samples may reveal relevant sub-clustering of samples.

\begin{center}
<<fig=TRUE>>=
cluster_GO(go_id="GO:0034142", result=BP.5,
           expr_data=log2cpm, phenodata=targets, f="Time")
@
\end{center}

\subsection[Details of genes associated with a GO term]{Details of genes associated with a GO term}

Following the identification of relevant GO terms in the above sections, users may want to have a closer look at the individual genes associated with a given GO term:

<<>>=
table_genes(result=BP.5, go_id="GO:0034142")
@

Note that the default behaviour of the above function is to return a table of all the genes associated with the GO term based on the BioMart database annotations. For obvious reasons, genes present in the BioMart database but absent from the expression dataset will be absent from the score table and conseuqently lack annotations. It is possible to restrict the above table to only genes present in the expression dataset using the \texttt{data.only} argument.

If only the gene identifiers associated with a given GO identifier are needed, users may use the function below:

<<>>=
list_genes(result=BP.5, go_id="GO:0034142")
@

\subsection[Expression profile of a gene]{Expression profile of a gene}

\subsubsection[Using the unique technical identifier]{Using the unique technical identifier}

In the above section, we listed the genes associated with a particular gene ontology. In our example, the respective score and rank of each gene estimates the ability of the gene to cluster the samples according to the treatment factor. The genes clustering best the samples will have the highest scores and the lowest ranks. Those genes will likely produce the expression profiles with the most consistent differential expression between the treatment groups over time. Here is one example:

\begin{center}
<<fig=TRUE>>=
expression_plot(gene_id="ENSBTAG00000047107", expr_data=log2cpm,
                phenodata=targets, x_var="Timepoint", result=BP.5)
@
\end{center}

Note that "\texttt{Timepoint}" is another column of \texttt{pData(targets)}. That column does not encode a factor, but a numeric vector. This difference enables the plotting function to respect the relative distance between the time-points for a more easily readable output.

To investigate the impact of other factors on the expression level of the same gene, users are encouraged to use the \texttt{f} and \texttt{x\_var} arguments to specify alternate grouping factor and X variable, respectively. Note that the \texttt{geom\_smooth} of the \texttt{ggplot2} package may fail if a minimal number of replicates is not available to calculate proper confidence intervals. Here is another valid example separating samples by animal on the X axis.

\begin{center}
<<fig=TRUE>>=
expression_plot(gene_id="ENSBTAG00000047107", expr_data=log2cpm,
                phenodata=targets, x_var="Animal", result=BP.5)
@
\end{center}

\subsubsection[Using the associated gene name]{Using the associated gene name}

It is also possible to visualise the expression profile of genes from their associated gene name if any. This is a human-friendlier version of the function presented in the previous subsection:

\begin{center}
<<fig=TRUE>>=
expression_plot_symbol(gene_symbol="BIKBA", expr_data=log2cpm,
                       phenodata=targets, x_var="Timepoint",
                       result=BP.5)
@
\end{center}

However, the benefits of this feature are balanced by the fact that genes lacking an associated gene name cannot be visualised in this manner, and that some gene symbols are associated with multiple ensembl gene identifiers and probesets (e.g. "RPL36A"). In the latter case, we turned the ambiguity into am additional useful feature: a lattice is created, and each of the multiple genes associated with the given gene symbol are plotted simultaneously in the lattice. Subsequently, each of the sub-figures plotted may be re-plotted by itself using the \texttt{index} argument as indicated in the accompanying printed message.

\subsection[Comparison of univariate effects on gene expression]{Comparison of univariate effects on gene expression}

While the analysis is restricted to the evaluation of a single factor, it can be helpful to compare the relative impact of all known factors present in the the accompanying \texttt{AnnotatedDataFrame} on the gene expression in the different groups of samples. 

In other words, given a GO term identifier this feature will generate a plot for each associated gene, where the mean (default; can be changed) expression level will be computed for each level of each factor and compared to one another:

\begin{center}
<<fig=TRUE>>=
plot_design(go_id="GO:0034134", expr_data=log2cpm,
            phenodata=targets, result=BP.5, ask=FALSE,
            factors=c("Animal", "Treatment", "Time", "Group"))
@
\end{center}

\section[Additional controls and advanced functions]{Additional controls and advanced functions}

\subsection[Overlapping genes between GO terms]{Overlapping genes between GO terms}

Often, the top-ranked cellular functions identified by pathways analysis and gene-set enrichment analysis tools are found to significantly overlap each other in terms of genes, limiting the number of genes identified by those approaches and blurring the precise cellular function represented by the core gene-set among a list of closely related yet different functions.

Typically, overlapping sets are representated as Venn diagrams. The example below will produce a Venn diagram of the gene-sets associated with the five top-ranked "Biological Process" ontologies, and directly save it as a TIFF image file (no matter the file extension given):

<<>>=
overlap_GO(go_ids=head(BP.5$GO$go_id, n=5), result=BP.5,
           filename="VennDiagram.tiff")
@

This Venn diagram package was chosen due to its consistent and easily readable layout, despite lacking the possibility to output the figure in the standard "Plot" panel. 

\subsection[Distribution of scores]{Distribution of scores}

Users might be interested in the general distribution of score and rank statistics produced by \texttt{GOexpress}. The distribution of scores may be represented as an histogram:

\begin{center}
<<fig=TRUE>>=
hist_scores(result=BP.5, labels=TRUE)
@
\end{center}

Alternatively, quantile values can be returned for default or customised percentiles:

<<>>=
quantiles_scores(result=BP.5)
@

\subsection[Reordering by score]{Reordering by score}

While scores are more prone to extreme outlier values and may slightly fluctuate between multiple runs of the random forest algorithm, ranks of genes and subsequently average ranks of GO terms are less prone to such variations and may be more reliable estimators of the importance of genes and cellular functions. Therefore, the default behaviour of \texttt{GOexpress} is to use the rank and average rank metrics to order genes and GO terms in the returned score tables.

It is however possible to re-order the tables in the output variable according to the score metric (or revert back to the original one) as in the example below:

<<>>=
BP.5.byScore = rerank(result=BP.5, rank.by="score")
@

\section[Notes]{Notes}

\subsection[Acknowledgement]{Acknowledgement}

The development of this package would not have been possible without the support and encouragement (and datasets) of my co-supervisors Prof. Stephen Gordon and Prof. David MacHugh. I would like to thank Dr. Andrew Parnell and Belinda Hernandez who suggested and helped me integrate the random forest framework in the package. Special thanks to Dr. Paul McGettigan for the many tips and tricks which made R an easier world for me, and Dr. David Magee for helpful advice on statistics. Last but not least, thanks to the University College Dublin OpenSequencing and Virtual Institute of Bioinformatics and Evolution (VIBE) communities where I first presented \texttt{GOexpress} and got valuable feedback and advice underlying a significant number of new and updated features.


\end{document}